generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String           @unique
  email           String           @unique
  passwordHash    String
  phone           String           @unique
  role            Role
  twoFactor       Boolean          @default(false)
  isActive        Boolean          @default(true)
  deleted         Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  locations       Location[]
  accidentReports AccidentReport[]
  alerts          Alert[]
  sensors         Sensor[]
  settings        Setting?
}

enum Role {
  USER
  ADMIN
  AMBULANCE
  POLICE
}

model Location {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  latitude  String
  longitude String
  isActive  Boolean  @default(true)
  deleted   Boolean  @default(false)
  updatedAt DateTime @updatedAt
}

model AccidentReport {
  id        String       @id @default(cuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  latitude  String
  longitude String
  status    ReportStatus
  isActive  Boolean      @default(true)
  deleted   Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  alerts    Alert[]

  @@map("accidentReport")
}

enum ReportStatus {
  PENDING
  CONFIRMED
  REJECTED
}

model Alert {
  id          String   @id @default(cuid())
  accidentId  String
  accident    AccidentReport @relation(fields: [accidentId], references: [id])
  recipientId String
  recipient   User     @relation(fields: [recipientId], references: [id])
  sent        Boolean  @default(false)
  sentAt      DateTime?
  isActive    Boolean  @default(true)
  deleted     Boolean  @default(false)
  updatedAt   DateTime @updatedAt
}

model Sensor {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      SensorType
  value     Float
  isActive  Boolean  @default(true)
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SensorType {
  GYROSCOPE
  SOUND
}

model Setting {
  id                 String  @id @default(cuid())
  userId             String  @unique 
  user               User    @relation(fields: [userId], references: [id])
  notifications      Boolean @default(true)
  locationSharing    Boolean @default(true)
  isActive          Boolean @default(true)
  deleted           Boolean @default(false)
  updatedAt         DateTime @updatedAt
}
